//Set the MODE FLAG field in the process table to the system call number which is 5 for write system call

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

alias userSP R0; //store sp in register
userSP = SP;


//Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

// fileDescriptor = -2 for console if not return -1

if (fileDescriptor != -2)
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
else	
	//Calculate physical address of the argument 2 and extract the value from it , which is the word to be printed to the console
	 alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	
	//print word;


	//Stage 15
	multipush(R0,R1,R2,R3,R4,R5);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = word;
	
	call MOD_4;
	
	multipop(R0,R1,R2,R3,R4,R5);
	//Stage 15	
	//Set return value to 0 for success
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
endif;

SP = userSP;
//Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
